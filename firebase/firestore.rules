
rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {

    match /Swalf/{salfhID} {
      allow create: if isValidSalfh(request.resource.data);
      allow read: if isSignedIn();
      match /userColors/userColors {
      	allow read: if isSignedIn();
        allow update: if isJoiningOrLeaving(request.resource.data);
      }

    }
    
    match /chatRooms/{room} {
    	allow read: if isSignedIn() && canReadChatroom();
      allow write: if isSignedIn();
      match /messages/{message} {
      	allow create: if isValidMessage(request.resource.data);
        allow read: if isSignedIn(); //TODO: only allow the user to read if they're in the salfh
      }
    }
    
    match /users/{user} {
    // never allow updating
    	allow create: if isValidUser(request.resource.data);
      allow read: if request.auth.uid == user; // if the document has id of the logged in user

      match /userTags/{tag} {
      	allow read, write: if request.auth.uid == user;
      }

      
    }
    
    match /tags/{tag} {
    	allow read, write: if isSignedIn();
    }


        match /likes/{userID} {
    allow read: if isSignedIn();
    allow update: if isUnChanged('likes') && isUnChanged('dislikes') &&  request.resource.data.diff(resource.data).affectedKeys().hasOnly([request.auth.uid]);

    
    }

  }

}


function isSignedIn() {
	return request.auth != null;
}

function isValidSalfh(salfh) {

  return salfh.size() == 7 &&
  salfh.title is string &&
  salfh.title.size() > 0 && salfh.title.size() <= 50 &&
  salfh.maxUsers is number &&
  salfh.maxUsers > 1 && salfh.maxUsers <= 5 &&
  salfh.lastMessageSent is map && salfh.lastMessageSent.size() == 0 &&
  salfh.tags is list && salfh.tags.size() <= 5 && // we need to check if all elements in the array are strings and that their lengths aren't too big too
	salfh.timeCreated == request.time &&
  salfh.adminID == request.auth.uid &&
  
  ////// colorsStatus validation
  salfh.colorsStatus.size() == salfh.maxUsers &&
  salfh.colorsStatus.keys().size() == salfh.colorsStatus.keys().toSet().size() && // unique keys only
  ['red', 'green', 'blue', 'yellow', 'purple'].hasAll(salfh.colorsStatus.keys()) && // only keys with valid color names
  salfh.colorsStatus.values().removeAll([null]).size() == 1 && // only one non-null value
  salfh.colorsStatus.values().removeAll([null])[0] == salfh.adminID // and that value is the creator's id 
  ; 
}

function isValidUser(user) {
	// return user.keys() == ['userSwalf'] &&
  return request.resource.id == request.auth.uid && 
  user.userSwalf is map && user.userSwalf.size() == 0;
}

function isValidMessage(message) {
	// return message.keys() == ['userID', 'color', 'content', 'timeSent'] && 
  return message.userID == request.auth.uid &&
  message.color is string && //TODO: check if it's the user's color
  message.content is string && message.content.size() > 0 &&
  message.timeSent == request.time;
}

function isJoiningOrLeaving(payload) {
	return payload.size() == 1 &&
  payload.keys().hasAny(resource.data.keys()) && ( // valid color
  (payload.values()[0] == null && resource.data[payload.keys()[0]] == request.auth.uid) || // from null to uid
  (payload.values()[0] == request.auth.uid && resource.data[payload.keys()[0]] == null)		// or from uid to null
  )
}

function canReadChatroom() {
	return true;
}

function isUnChanged(attr){
  return !(attr in request.resource.data) ||
  request.resource.data[attr] == resource.data[attr];
}
