
rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database

    match /Swalf/{salfhID} {

      allow create: if isValidSalfh(request.resource.data);
      allow read, update: if isSignedIn();

    }
    
    match /chatRooms/{room} {
    	allow read: if isSignedIn() && canReadChatroom();
      allow write: if isSignedIn();
      match /messages/{message} {
      	allow create: if isValidMessage(request.resource.data);
        allow read: if isSignedIn(); //TODO: only allow the user to read if they're in the salfh
      }
    }
    
    match /users/{user} {
    // never allow updating
    	allow create: if isValidUser(request.resource.data);
      allow read: if request.auth.uid == user; // if the document has id of the logged in user

      match /userTags/{tag} {
      	allow read, write: if request.auth.uid == user;
      }

      
    }
    
    match /tags/{tag} {
    	allow read, write: if isSignedIn();
    }

  }

}

function isSignedIn() {
	return request.auth != null;
}

function isValidSalfh(salfh) {

  // return salfh.keys() == ['title', 'maxUsers', 'lastMessageSent', 'tags', 'timeCreated', 'creatorID'] &&
  return salfh.title is string &&
  salfh.title.size() > 0 && salfh.title.size() <= 50 &&
  salfh.maxUsers is number &&
  salfh.maxUsers > 1 && salfh.maxUsers <= 5 &&
  salfh.lastMessageSent is map && salfh.lastMessageSent.size() == 0 &&
  salfh.tags is list && salfh.tags.size() <= 5 && // we need to check if all elements in the array are strings and that their lengths aren't too big too
	salfh.timeCreated == request.time &&
  salfh.creatorID == request.auth.uid; 
}

function isValidUser(user) {
	// return user.keys() == ['userSwalf'] &&
  return request.resource.id == request.auth.uid && 
  user.userSwalf is map && user.userSwalf.size() == 0;
}

function isValidMessage(message) {
	// return message.keys() == ['userID', 'color', 'content', 'timeSent'] && 
  return message.userID == request.auth.uid &&
  message.color is string && //TODO: check if it's the user's color
  message.content is string && message.content.size() > 0 &&
  message.timeSent == request.time;
}

function canReadChatroom() {
	return true;
}
